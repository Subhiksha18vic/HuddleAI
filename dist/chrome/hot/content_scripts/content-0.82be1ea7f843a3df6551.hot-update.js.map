{"version":3,"file":"hot/content_scripts/content-0.82be1ea7f843a3df6551.hot-update.js","mappingssources":["webpack://smith/./content/components/SpeechToText.tsx","webpack://smith/webpack/runtime/getFullHash"],"sourcesContent":["__webpack_require__.$Refresh$.runtime = require('/Users/I528960/Documents/Projects/Personal/projectsmith/smith/node_modules/react-refresh/runtime.js');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nconst SpeechToText = ()=>{\n    _s();\n    const [text, setText] = useState(\"\"); // To store the recognized text\n    const [isListening, setIsListening] = useState(false);\n    const [error, setError] = useState(\"\");\n    let recognition;\n    // Check if SpeechRecognition is available\n    if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        recognition = new SpeechRecognition();\n        // SpeechRecognition configuration\n        recognition.continuous = true; // Keep listening for speech\n        recognition.interimResults = true; // Only return final results\n        recognition.lang = \"en-US\"; // Language for recognition\n    } else {\n        console.error(\"SpeechRecognition not supported in this browser\");\n        setError(\"SpeechRecognition not supported in this browser\");\n    }\n    // Start listening to speech\n    const startListening = ()=>{\n        if (!recognition) {\n            return;\n        }\n        recognition.start();\n        setIsListening(true);\n        // Event listeners\n        recognition.onresult = (event)=>{\n            let spokenText = \"\";\n            for(let i = event.resultIndex; i < event.results.length; i++){\n                spokenText += event.results[i][0].transcript;\n            }\n            setText((prevText)=>prevText + \" \" + spokenText);\n        };\n        recognition.onerror = (event)=>{\n            console.error(\"Error occurred in speech recognition: \", event.error);\n            setError(event.error);\n            setIsListening(false);\n        };\n        recognition.onend = ()=>{\n            setIsListening(false);\n        };\n    };\n    // Stop listening to speech\n    const stopListening = ()=>{\n        if (!recognition) {\n            return;\n        }\n        recognition.stop();\n        setIsListening(false);\n    };\n    useEffect(()=>{\n        // Clean up event listeners on component unmount\n        return ()=>{\n            if (recognition) {\n                recognition.stop();\n                recognition.onresult = null;\n                recognition.onerror = null;\n                recognition.onend = null;\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ _jsxDEV(\"div\", {\n        children: [\n            /*#__PURE__*/ _jsxDEV(\"p\", {\n                className: \"mt-6 text-lg leading-8 text-gray-300\",\n                children: \"Speech-to-Text Recognition\"\n            }, void 0, false, {\n                fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n                lineNumber: 76,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ _jsxDEV(\"div\", {\n                children: [\n                    /*#__PURE__*/ _jsxDEV(\"button\", {\n                        onClick: startListening,\n                        disabled: isListening,\n                        className: \"bg-zinc-100 py-1 px-2 rounded-lg text-zinc-800 text-md hover:bg-zinc-200 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white mt-2 font-bold\",\n                        children: \"Start Listening\"\n                    }, void 0, false, {\n                        fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n                        lineNumber: 78,\n                        columnNumber: 7\n                    }, this),\n                    /*#__PURE__*/ _jsxDEV(\"button\", {\n                        onClick: stopListening,\n                        disabled: !isListening,\n                        className: \"bg-zinc-100 py-1 px-2 rounded-lg text-zinc-800 text-md hover:bg-zinc-200 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white mt-2 font-bold\",\n                        children: \"Stop Listening\"\n                    }, void 0, false, {\n                        fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n                        lineNumber: 85,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n                lineNumber: 77,\n                columnNumber: 7\n            }, this),\n            error && /*#__PURE__*/ _jsxDEV(\"p\", {\n                style: {\n                    color: \"red\"\n                },\n                children: [\n                    \"Error: \",\n                    error\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n                lineNumber: 93,\n                columnNumber: 17\n            }, this),\n            /*#__PURE__*/ _jsxDEV(\"textarea\", {\n                rows: 10,\n                cols: 50,\n                value: text,\n                onChange: (e)=>setText(e.target.value),\n                placeholder: \"Speech will be converted to text here...\"\n            }, void 0, false, {\n                fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n                lineNumber: 94,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/I528960/Documents/Projects/Personal/projectsmith/smith/content/components/SpeechToText.tsx\",\n        lineNumber: 75,\n        columnNumber: 5\n    }, this);\n};\n_s(SpeechToText, \"F2drLGVzVfDfwR1K17f6+OfrD0g=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");\n\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (module.hot) {\n\t\tlet errorOverlay;\n\t\tif (typeof __react_refresh_error_overlay__ !== 'undefined') {\n\t\t\terrorOverlay = __react_refresh_error_overlay__;\n\t\t}\n\t\tlet testMode;\n\t\tif (typeof __react_refresh_test__ !== 'undefined') {\n\t\t\ttestMode = __react_refresh_test__;\n\t\t}\n\t\treturn __react_refresh_utils__.executeRuntime(\n\t\t\texports,\n\t\t\t$ReactRefreshModuleId$,\n\t\t\tmodule.hot,\n\t\t\terrorOverlay,\n\t\t\ttestMode\n\t\t);\n\t}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}","__webpack_require__.h = () => (\"f94960feead39bd7456e\")"],"names":[],"sourceRoot":""}